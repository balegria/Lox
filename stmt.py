
# GENERATED FILE - DO NOT MANUALLY EDIT!
# Generated by generate_ast.py

from abc import ABC, abstractmethod


class Visitor(ABC):
    @abstractmethod
    def visit_BlockStmt(self):
        pass
    @abstractmethod
    def visit_ExpressionStmt(self):
        pass
    @abstractmethod
    def visit_FunctionStmt(self):
        pass
    @abstractmethod
    def visit_IfStmt(self):
        pass
    @abstractmethod
    def visit_PrintStmt(self):
        pass
    @abstractmethod
    def visit_VarStmt(self):
        pass
    @abstractmethod
    def visit_WhileStmt(self):
        pass

class Stmt(ABC):
    @abstractmethod
    def accept(self, visitor):
        '''Call a method on the visitor based on your class name'''
        pass

class Block(Stmt):

    def __init__(self, statements):
        self.statements = statements

    def accept(self, visitor):
        return visitor.visit_BlockStmt(self)


class Expression(Stmt):

    def __init__(self, expression):
        self.expression = expression

    def accept(self, visitor):
        return visitor.visit_ExpressionStmt(self)


class Function(Stmt):

    def __init__(self, name, params, body):
        self.name = name
        self.params = params
        self.body = body

    def accept(self, visitor):
        return visitor.visit_FunctionStmt(self)


class If(Stmt):

    def __init__(self, condition, then_branch, else_branch):
        self.condition = condition
        self.then_branch = then_branch
        self.else_branch = else_branch

    def accept(self, visitor):
        return visitor.visit_IfStmt(self)


class Print(Stmt):

    def __init__(self, expression):
        self.expression = expression

    def accept(self, visitor):
        return visitor.visit_PrintStmt(self)


class Var(Stmt):

    def __init__(self, name, initializer):
        self.name = name
        self.initializer = initializer

    def accept(self, visitor):
        return visitor.visit_VarStmt(self)


class While(Stmt):

    def __init__(self, condition, body):
        self.condition = condition
        self.body = body

    def accept(self, visitor):
        return visitor.visit_WhileStmt(self)


